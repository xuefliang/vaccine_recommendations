import ibis
from ibis.expr import datatypes
from ibis import _
import ibis.selectors as s
ibis.options.interactive = True
from functools import reduce

con=ibis.duckdb.connect()
person = (
    con.read_parquet('/mnt/d/标准库接种率/data/person.parquet')
    .mutate(
        current_management_code=_.current_management_code.cast("string"),
        vaccination_org=_.vaccination_org.cast("string"),
        entry_org=_.entry_org.cast("string")
    )
    # .filter([(_.current_management_code=='334878619388') | (_.vaccination_org=='334878619388')])
    .filter(_.id_x=='216e40fef4fe4bef97244fff5c1edc91')
)

class VaccinationAnalyzer:
    def __init__(self, person, current_date):
        self.person = person
        self.current_date = current_date
        self.vaccine_mapping = {
            '0101': '卡介苗',
            '0201': '乙肝疫苗', '0202': '乙肝疫苗', '0203': '乙肝疫苗',
            '0301': '脊灰疫苗', '0302': '脊灰疫苗', '0303': '脊灰疫苗',
            '0304': '脊灰疫苗', '0305': '脊灰疫苗', '0306': '脊灰疫苗',
            '0311': '脊灰疫苗', '0312': '脊灰疫苗',
            '0401': '百白破疫苗', '0402': '百白破疫苗', '0403': '百白破疫苗', '4901': '百白破疫苗',
            '1201': '含麻疹成分疫苗', '1301': '含麻疹成分疫苗', '1401': '含麻疹成分疫苗',
            '5001': 'DTaPIPVHib五联疫苗',
            '0601': '白破疫苗',
            '1601': '流脑疫苗A群',
            '1701': '流脑疫苗AC群',
            '1702': '流脑替代疫苗', '1703': '流脑替代疫苗', '1704': '流脑替代疫苗', '5301': '流脑替代疫苗',
            '1801': '乙脑疫苗',
            '1802': '乙脑灭活疫苗', '1803': '乙脑灭活疫苗', '1804': '乙脑灭活疫苗',
            '1901': '甲肝疫苗',
            '1902': '甲肝灭活疫苗', '1903': '甲肝灭活疫苗'
        }
        self.expected_columns = [
            '卡介苗_1', 
            '乙肝疫苗_1', '乙肝疫苗_2', '乙肝疫苗_3', 
            '脊灰疫苗_1', '脊灰疫苗_2', '脊灰疫苗_3', '脊灰疫苗_4',
            '百白破疫苗_1', '百白破疫苗_2', '百白破疫苗_3', '百白破疫苗_4',
            '含麻疹成分疫苗_1', '含麻疹成分疫苗_2',
            '乙脑疫苗_1', '乙脑疫苗_2',
            '甲肝疫苗_1',
            '流脑疫苗A群_1', '流脑疫苗A群_2',
            '流脑疫苗AC群_1', '流脑疫苗AC群_2',
            '乙脑灭活疫苗_1', '乙脑灭活疫苗_2', '乙脑灭活疫苗_3', '乙脑灭活疫苗_4',
            '甲肝灭活疫苗_1', '甲肝灭活疫苗_2',
            'DTaPIPVHib五联疫苗_1', 'DTaPIPVHib五联疫苗_2', 'DTaPIPVHib五联疫苗_3', 'DTaPIPVHib五联疫苗_4',
            '流脑替代疫苗_1', '流脑替代疫苗_2', '流脑替代苗_3', '流脑替代疫苗_4'
        ]
        self.vaccine_names = [
            '卡介苗_1', '乙肝疫苗_1', '乙肝疫苗_2', '乙肝疫苗_3', '脊灰疫苗_1', '脊灰疫苗_2', '脊灰疫苗_3', '脊灰疫苗_4',
            '百白破疫苗_1', '百白破疫苗_2', '百白破疫苗_3', '百白破疫苗_4', '含麻疹成分疫苗_1', '含麻疹成分疫苗_2',
            '乙脑疫苗_1', '乙脑疫苗_2', '甲肝疫苗_1', '流脑疫苗A群_1', '流脑疫苗A群_2', '流脑疫苗AC群_1', '流脑疫苗AC群_2'
        ]

    def preprocess_data(self):
        case_stmt = ibis.case()
        for code, name in self.vaccine_mapping.items():
            case_stmt = case_stmt.when(_.vaccination_code == code, ibis.literal(name))
        case_stmt = case_stmt.else_(ibis.literal(None))

        self.person = self.person.mutate(
            vaccine_name=case_stmt.end().cast(datatypes.String),
            current_date=ibis.date(self.current_date.year, self.current_date.month, self.current_date.day)
        )

        self.person = self.person.mutate(
            vaccination_month=(_.vaccination_date.epoch_seconds() - _.birth_date.epoch_seconds()) / (30.44 * 24 * 3600),
            age_month=(_.current_date.epoch_seconds() - _.birth_date.epoch_seconds()) / (30.44 * 24 * 3600)
        )

        self.person = (
            self.person.group_by(['id_x','vaccine_name'])
            .order_by(['vaccination_date'])
            .mutate(
                dose=(_.vaccination_date.rank().cast('int64') + 1).cast('string')
            )
        )

        self.person = (
            self.person.mutate(
                vaccination_org=ibis.case()
                .when(
                    (_.vaccination_org.isin(['777777777777', '888888888888', '999999999999'])) &
                    (_.vaccine_name.isin(['乙肝疫苗', '卡介苗'])) &
                    (_.dose == '1'),
                    _.entry_org
                )
                .else_(_.vaccination_org)
                .end()
                .cast('string') 
            )
            .drop('entry_org')
        )

    def pivot_data(self):
        self.person = self.person.pivot_wider(names_from=['dose','vaccine_name'], values_from=['vaccination_date'], values_agg="first")

        # 检查并添加缺失的列
        for col in self.expected_columns:
            if col not in self.person.columns:
                self.person = self.person.mutate(**{col: ibis.null().cast(datatypes.date)})

    def substitute_vaccines(self):
        self.person = self.person.mutate(
            _脊灰疫苗_1=ibis.coalesce(_.脊灰疫苗_1, _.DTaPIPVHib五联疫苗_1),
            _脊灰疫苗_2=ibis.coalesce(_.脊灰疫苗_2, _.DTaPIPVHib五联疫苗_2),
            _脊灰疫苗_3=ibis.coalesce(_.脊灰疫苗_3, _.DTaPIPVHib五联疫苗_3),
            _脊灰疫苗_4=ibis.coalesce(_.脊灰疫苗_4, _.DTaPIPVHib五联疫苗_4),
            _流脑疫苗A群_1=ibis.coalesce(_.流脑疫苗A群_1, _.流脑替代疫苗_1),
            _流脑疫苗A群_2=(
                ibis.case()
                .when((_.vaccination_code == '5001') & (_.vaccination_month < 6),
                      ibis.coalesce(_.流脑疫苗A群_2, _.流脑替代疫苗_3))
                .when((_.vaccination_code == '5001') & (_.vaccination_month >= 6),
                      ibis.coalesce(_.流脑疫苗A群_2, _.流脑替代疫苗_2))
                .end()
            ),
            _流脑疫苗AC群_1=(
                ibis.case()
                .when((_.vaccination_code == '5001') & (_.vaccination_month >= 24),
                      ibis.coalesce(_.流脑疫苗AC群_1, _.流脑替代疫_1))
                .end()
            ),
            _流脑疫苗AC群_2=(
                ibis.case()
                .when((_.vaccination_code == '5001') & (_.vaccination_month >= 60),
                      ibis.coalesce(_.流脑疫苗AC群_2, _.流脑替代疫苗_2))
                .end()
            ),
            _甲肝疫苗_1=ibis.coalesce(_.甲肝疫苗_1, _.甲肝灭活疫苗_1),
            _乙脑疫苗_1=(
                ibis.case()
                .when((_.vaccination_code.isin(['1802','1803','1804'])),
                      ibis.coalesce(_.乙脑疫苗_1, _.乙脑灭活疫苗_2))
                .end()
            ),
            _乙脑疫苗_2=(
                ibis.case()
                .when((_.vaccination_code.isin(['1802','1803','1804'])) & (_.vaccination_month <= 72),
                      ibis.coalesce(_.乙脑疫苗_2, _.乙脑灭活疫苗_3))
                .when((_.vaccination_code.isin(['1802','1803','1804'])) & (_.vaccination_month > 72),
                      ibis.coalesce(_.乙脑疫苗_2, _.乙脑灭活疫苗_4))
                .end()
            )
        )

    def calculate_recommended_dates(self):
        import ibis
        from ibis import _

        # 先按id_x分组
        grouped_person = self.person.group_by('id_x')

        for column in self.expected_columns:
            # 对每一列进行向前和向后填充
            grouped_person = grouped_person.mutate(**{
                f'{column}_forward': ibis.ifnull(
                    _[column],
                    _.lag(_[column]).over(ibis.window(group_by='id_x', order_by=_[column]))
                ),
                f'{column}_backward': ibis.ifnull(
                    _[column],
                    _.lead(_[column]).over(ibis.window(group_by='id_x', order_by=_[column]))
                )
            })

            # 合并向前和向后填充的结果
            grouped_person = grouped_person.mutate(**{
                f'{column}_filled': ibis.coalesce(
                    _[column],
                    _[f'{column}_forward'],
                    _[f'{column}_backward']
                )
            })

            # 删除临时列
            grouped_person = grouped_person.drop([f'{column}_forward', f'{column}_backward'])

        # 解除分组
        self.person = grouped_person.ungroup()

        # 其他代码保持不变...

    def analyze(self):
        self.preprocess_data()
        self.pivot_data()
        self.substitute_vaccines()
        self.calculate_recommended_dates()
        return self.person

current_date = date(2021, 1, 31)
analyzer = VaccinationAnalyzer(person, current_date)
result = analyzer.analyze().to_pandas()

person1=self.person.select('id_x',_.卡介苗_1).filter(_.卡介苗_1.notnull())
        person2=self.person.select('id_x',_.乙肝疫苗_1).filter(_.乙肝疫苗_1.notnull())
        person3=self.person.select('id_x',_.乙肝疫苗_2).filter(_.乙肝疫苗_2.notnull())
        person4=self.person.select('id_x',_.乙肝疫苗_3).filter(_.乙肝疫苗_3.notnull())
        person5=self.person.select('id_x',_.脊灰疫苗_1).filter(_.脊灰疫苗_1.notnull())
        person6=self.person.select('id_x',_.脊灰疫苗_2).filter(_.脊灰疫苗_2.notnull())
        person7=self.person.select('id_x',_.脊灰疫苗_3).filter(_.脊灰疫苗_3.notnull())
        person8=self.person.select('id_x',_.脊灰疫苗_4).filter(_.脊灰疫苗_4.notnull())
        person9=self.person.select('id_x',_.百白破疫苗_1).filter(_.百白破疫苗_1.notnull())
        person10=self.person.select('id_x',_.百白破疫苗_2).filter(_.百白破疫苗_2.notnull())
        person11=self.person.select('id_x',_.百白破疫苗_3).filter(_.百白破疫苗_3.notnull())
        person12=self.person.select('id_x',_.百白破疫苗_4).filter(_.百白破疫苗_4.notnull())
        person13=self.person.select('id_x',_.含麻疹成分疫苗_1).filter(_.含麻疹成分疫苗_1.notnull())
        person14=self.person.select('id_x',_.含麻疹成分疫苗_2).filter(_.含麻疹成分疫苗_2.notnull())
        person15=self.person.select('id_x',_.流脑疫苗A群_1).filter(_.流脑疫苗A群_1.notnull())
        person16=self.person.select('id_x',_.流脑疫苗A群_2).filter(_.流脑疫苗A群_2.notnull())
        person17=self.person.select('id_x',_.流脑疫苗AC群_1).filter(_.流脑疫苗AC群_1.notnull())
        person18=self.person.select('id_x',_.流脑疫苗AC群_2).filter(_.流脑疫苗AC群_2.notnull())
        person19=self.person.select('id_x',_.甲肝疫苗_1).filter(_.甲肝疫苗_1.notnull())
        person20=self.person.select('id_x',_.乙脑疫苗_1).filter(_.乙脑疫苗_1.notnull())
        person21=self.person.select('id_x',_.乙脑疫苗_2).filter(_.乙脑疫苗_2.notnull())

        self.person=person1.left_join(person2,_.id_x==_.id_x).drop('id_x_right')
